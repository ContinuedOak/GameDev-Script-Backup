using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;

public class ZombieAI : MonoBehaviour
{
    [Header("ZombieAI")]
    [Header("v0.6.1")]
    [Space(12)]
    #region Config
    [Header("Config")]
    public bool hasAI;
    public bool isAlive;
    public bool isIdle;
    public bool isDead;
    public bool isVisible;
    public bool isCrawler;
    public float speed;
    public int health;
    public Vector3 hitBox; // x, y, z
    public Vector3 cHitBox; // x, y, z
    public Vector2 offSet; // C, W
    public float destroyTime = 3f;
    public float raycastDistance = 1f;
    public LayerMask damageSourceLayer;
    //////////////////////////////////////////////////////////
    [Header("Animations")]
    public int _animator;
    public Animator animator;
    public RuntimeAnimatorController[] newController;
    //////////////////////////////////////////////////////////
    [Header("Scriptable/Attachables")]
    public GameObject model;
    public GameObject spawnObject;
    public GameObject[] drops;
    public delegate void ZombieDeathEventHandler(ZombieAI zombie);
    public event ZombieDeathEventHandler OnZombieDeath;
    //////////////////////////////////////////////////////////
    [Header("Audio")]
    public AudioClip[] audioClips;
    public AudioClip death;
    //////////////////////////////////////////////////////////
    [Header("AI Events")]
    public bool isFollowing;
    public bool despawn;
    //public event Action<ZombieAI> Despawned;
    //////////////////////////////////////////////////////////

    // Private configurations
    private UnityEngine.AI.NavMeshAgent navAgent;
    //private float healthDecreaseRate = 10f; // Health decrease rate per second
    private UnityEngine.AI.NavMeshAgent agent;
    private GameObject player;
    private AudioSource audioSource;
    #endregion

    #region Loottable
    void SpawnRandomDrop()
    {
        if (UnityEngine.Random.value <= 0.05f) // 5% chance to drop something
        {
            float dropChance = UnityEngine.Random.value;

            // Check each drop item individually
            if (dropChance <= 0.15f) // 15% Chance of dropping MaxAmmo
            {
                GameObject drop = Instantiate(drops[0], spawnObject.transform.position, Quaternion.identity);
                return; // Only spawn one drop
            }
            else if (dropChance <= 0.20f) // 5% Chance of dropping nuke (0.20 - 0.15)
            {
                GameObject drop = Instantiate(drops[1], spawnObject.transform.position, Quaternion.identity);
                return; // Only spawn one drop
            }
            else if (dropChance <= 0.25f) // 5% Chance of dropping another nuke (0.25 - 0.20)
            {
                GameObject drop = Instantiate(drops[2], spawnObject.transform.position, Quaternion.identity);
                return; // Only spawn one drop
            }
            else if (dropChance <= 0.50f) // 25% Chance of dropping another nuke (0.50 - 0.25)
            {
                GameObject drop = Instantiate(drops[3], spawnObject.transform.position, Quaternion.identity);
                return; // Only spawn one drop
            }
        }
    }



    #endregion
    #region Triggers/Damage
    public void TakeDamage(int damageAmount)
    {
        health -= damageAmount;
    }
    #endregion
    #region Audio
    private void PlayRandomClip()
    {
        if (audioClips.Length == 0)
        {
            Debug.LogWarning("No audio clips assigned to the array.");
            return;
        }

        int randomIndex = UnityEngine.Random.Range(0, audioClips.Length);
        audioSource.clip = audioClips[randomIndex];
        audioSource.Play();
    }

    private IEnumerator PlayRandomClipsContinuously(float minDelay = 1f, float maxDelay = 3f)
    {
        while (true)
        {
            PlayRandomClip();
            float delay = UnityEngine.Random.Range(minDelay, maxDelay);
            yield return new WaitForSeconds(delay);
        }
    }

    public void StartPlayingRandomClips()
    {
        StopPlayingRandomClips();
        StartCoroutine(PlayRandomClipsContinuously());
    }

    public void StopPlayingRandomClips()
    {
        StopAllCoroutines();
    }
    #endregion
    #region Unity
    private void Start()
    {
        // NavInfo (AI finding its target)
        agent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        player = GameObject.FindGameObjectWithTag("Player");
        navAgent = GetComponent<UnityEngine.AI.NavMeshAgent>();
        animator = GetComponent<Animator>();

        // Audio
        audioSource = GetComponent<AudioSource>();
        if (audioSource == null)
        {
            audioSource = gameObject.AddComponent<AudioSource>();
        }

        StartCoroutine(PlayRandomClipsContinuously());

        isFollowing = true;

        // Randomly determine whether the zombie crawls or walks
        isCrawler = UnityEngine.Random.value <= 0.15f;

        if (isCrawler)
        {
            Crawler();
        }
        else
        {
            Regular();
        }

        ChangeSpeed();
    }
    private void Update()
    {
        Visiblity();
        Dead();
        Jumping();
        AIChecking();
        if (Physics.Raycast(transform.position, transform.forward, out RaycastHit hit, raycastDistance, damageSourceLayer))
        {
            if (hit.collider.CompareTag("DamageSource"))
            {
                TakeDamage(1);
                
            }
        }
    }
    #endregion
    #region AI

    private void Following()
    {
        if (isFollowing && player != null)
        {
            agent.SetDestination(player.transform.position);
        }
        else
        {
            ForceStop();
            Despawn();
        }
    }

    private void ChangeSpeed()
    {
        navAgent.speed = speed;
    }

    private void ForceStop()
    {
        agent.isStopped = true;
    }

    private void ForceGo()
    {
        agent.isStopped = false;
    }

    private void Dead()
    {
        if (health <= 0)
        {
            isAlive = false;
            isDead = true;
            hasAI = false;
            isVisible = false;
            Visiblity();
            SpawnRandomDrop(); // Spawn the random drop items

            // Call the OnZombieDeath event, passing this zombie as an argument
            OnZombieDeath?.Invoke(this);
            ForceStop();
        }
        else
        {
            isAlive = true;
        }
    }


    #endregion
    #region Types
    void Crawler()
    {
        // Set Animaiton Style
        _animator = 0;
        animator.runtimeAnimatorController = newController[_animator];


        // Set Speed
        speed = 0.5f;

        // Change HitboxSize
        BoxCollider boxCollider = GetComponent<BoxCollider>();
        boxCollider.size = new Vector3(cHitBox[0], cHitBox[1], cHitBox[2]);
        boxCollider.center = new Vector3(0, offSet[0], 0);
    }

    void Regular()
    {
        // Set Animaiton Style
        _animator = 1;
        animator.runtimeAnimatorController = newController[_animator];


        // Change HitboxSize
        BoxCollider boxCollider = GetComponent<BoxCollider>();
        boxCollider.size = new Vector3(hitBox[0], hitBox[1], hitBox[2]);
        boxCollider.center = new Vector3(0, offSet[1], 0);
    }
    #endregion
    #region Visiblity/Despawn
    private void Visiblity()
    {
        if (isVisible)
        {
            model.SetActive(true);
        }
        else
        {
            model.SetActive(false);
        }
    }

    public void Despawn()
    {
        // Destroy the zombie game object
        Destroy(gameObject, destroyTime);
    }
    #endregion
    #region Ai Check
    void AIChecking()
    {
        #region Has AI
        if (hasAI)
        {
            ForceGo();
            if (isAlive)
            {
                Following();

            }
        }
        else
        {
            ForceStop();
        }
        #endregion
    }
    #endregion
    #region Jump
    private void Jumping()
    {
        if (animator != null && navAgent != null)
        {
            if (!isCrawler)
            {
                if (navAgent.velocity.y > 0f) // Check if the agent is moving upwards
                {
                    animator.SetBool("jump", true); // Set the "jump" bool parameter to true
                }
                else
                {
                    animator.SetBool("jump", false); // Set the "jump" bool parameter to false
                }
            }
        }
    }
    #endregion
}
